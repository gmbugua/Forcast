@mixin text-container {
  h1,
  h2,
  h3,
  h4 {
    // margin-top: var(--space-xs);
    margin: 0 auto;
  }

  ul,
  ol,
  p {
    // margin-bottom: var(--space-xs);
    margin: 0 auto;
  }

  ul,
  ol {
    list-style-position: outside;
    padding-left: 24px;
  }

  ul {
    list-style-type: disc;
  }

  ol {
    list-style-type: decimal;
  }

  ul li,
  ol li {
    line-height: var(--body-line-height);
  }

  em {
    font-style: italic;
  }

  u {
    text-decoration: underline;
  }
}

/* breakpoints */
$breakpoints: (
  "sm": 542px,
  "md": 767px,
  "lg": 992px,
);

// @mixin clean-transition($breakpoint, $maxWidth) {
// }

@mixin respond-to($breakpoint) {
  // Retrieves the value from the key
  $value: map-get($breakpoints, $breakpoint);

  // If the key exists in the map
  @if $value != null {
    // Prints a media query based on the value
    @media (min-width: $value) {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
              + "Please make sure it is defined in `$breakpoints` map.";
  }
}

/* Grid and Layout */

//grid gap
$gap-horizontal: 20px;
$gap-vertical: $gap-horizontal;
$grid-columns: 12;

@mixin grid {
  @supports (grid-area: auto) {
    display: grid;
    grid-column-gap: $gap-horizontal;
    grid-row-gap: $gap-vertical;
  }
}

@mixin gridLayout($cols...) {
  @supports (grid-area: auto) {
    grid-template-columns: repeat($grid-columns, 1fr);

    $i: 1;
    @each $col in $cols {
      > :nth-of-type(#{$i}) {
        grid-column-end: span nth($col, 1);
        @if length($col) > 1 {
          grid-row-end: span nth($col, 2);
        }
      }
      $i: $i + 1;
    }
  }
}
